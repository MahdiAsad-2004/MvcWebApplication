// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrganicShop.DAL.Context;

#nullable disable

namespace OrganicShop.DAL.Migrations
{
    [DbContext(typeof(OrganicShopDbContext))]
    [Migration("20240813173639_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Province")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Address.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SellerId")
                        .IsUnique()
                        .HasFilter("[SellerId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Article.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.BankCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cvv2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.BankCard.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Cart.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Category.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeedback")
                        .HasColumnType("bit");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Comment.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ContactUs", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Address = "Address",
                            Description = "Descriptions",
                            Email1 = "OrganicShop@gmail.com",
                            Office1 = "Tehran",
                            Phone1 = "02134658899",
                            PhoneNumber1 = "09121234455",
                            ShortDescription = "ShorDescriptions"
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxCost")
                        .HasColumnType("int");

                    b.Property<int?>("MinCost")
                        .HasColumnType("int");

                    b.Property<int?>("Percent")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Coupon.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Percent")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Discount.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Faq", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Faq.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.NewsLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.NewsLetter.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("NewsLetters");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.NewsLetterMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.NewsLetterMember.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NewsLetterMembers");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.NextCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.NextCart.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("NextCarts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TextHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Notification.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityNewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOldData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CouponAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDateEstimated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShippingPrice")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Order.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("OrderAddress", "OrganicShop.Domain.Entities.Order.OrderAddress#OrderAddress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("AddressId")
                                .HasColumnType("bigint");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Province")
                                .HasColumnType("int");

                            b1.Property<string>("ReceiverName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Permission", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("EnTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("ParentId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            EnTitle = "Main Admin",
                            Title = "مدیر سایت"
                        },
                        new
                        {
                            Id = (byte)2,
                            EnTitle = "Users Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت کاربران"
                        },
                        new
                        {
                            Id = (byte)3,
                            EnTitle = "Products Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت محصولات"
                        },
                        new
                        {
                            Id = (byte)4,
                            EnTitle = "Permissions Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت مجوز ها"
                        },
                        new
                        {
                            Id = (byte)5,
                            EnTitle = "Comments Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت نظرات"
                        },
                        new
                        {
                            Id = (byte)6,
                            EnTitle = "Discounts Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت تخفیف ها"
                        },
                        new
                        {
                            Id = (byte)7,
                            EnTitle = "Categories Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت دسته ها"
                        },
                        new
                        {
                            Id = (byte)8,
                            EnTitle = "Giving Permission",
                            ParentId = (byte)4,
                            Title = "صدور مجوز"
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Picture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<float>("SizeMB")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId")
                        .IsUnique()
                        .HasFilter("[SellerId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Picture");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsMain = true,
                            Name = "joker.png",
                            SizeMB = 0.5f,
                            Type = 0,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountedPrice")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Product.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ProductItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit");

                    b.Property<long?>("NextCartId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("PurchasedPrice")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.ProductItem.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("NextCartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Property.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.PropertyType.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.CouponCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Relations.CouponCategories.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponCategories");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.DiscountProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Relations.DiscountProducts.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.PermissionUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("PermissionId")
                        .HasColumnType("tinyint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = (byte)1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.TagArticles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Relations.TagArticles.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TagId");

                    b.ToTable("TagArticles");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.TagProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Relations.TagProducts.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.WishItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Relations.WishItem.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WhishItems");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Seller.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ShippingMethod", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "پست پیشتاز",
                            Price = 30000
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "پست سفارشی",
                            Price = 50000
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "تیپاکس",
                            Price = 100000
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "پیک موتوری",
                            Price = 120000
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.Tag.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingDescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.TrackingDescription.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("TrackingDescriptions");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoneStatus")
                        .HasColumnType("int");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.TrackingStatus.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("TrackingStatuses");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationSendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "mas1379as@gmail.com",
                            Gender = 1,
                            IsEmailVerified = true,
                            Name = "Mahdi Asadi",
                            Password = "8D969EEF6ECAD3C29A3A629280E686CF0C3F5D5A86AFF3CA12020C923ADC6C92",
                            PhoneNumber = "09369753041",
                            Role = 1
                        },
                        new
                        {
                            Id = 2L,
                            Email = "TestEmail@gmail.com",
                            Gender = 1,
                            IsEmailVerified = false,
                            Name = "AmirAli",
                            Password = "8D969EEF6ECAD3C29A3A629280E686CF0C3F5D5A86AFF3CA12020C923ADC6C92",
                            PhoneNumber = "09331234566",
                            Role = 2
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BaseEntity", "OrganicShop.Domain.Entities.UserMessage.BaseEntity#BaseEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Address", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Seller", "Seller")
                        .WithOne("Address")
                        .HasForeignKey("OrganicShop.Domain.Entities.Address", "SellerId");

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Article", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.BankCard", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("BankCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OrganicShop.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Category", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", "Parent")
                        .WithMany("Subs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Comment", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId");

                    b.HasOne("OrganicShop.Domain.Entities.Seller", "Seller")
                        .WithMany("Comments")
                        .HasForeignKey("SellerId");

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("Product");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ContactUs", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<byte>("ContactUsId")
                                .HasColumnType("tinyint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("ContactUsId");

                            b1.ToTable("ContactUs");

                            b1.WithOwner()
                                .HasForeignKey("ContactUsId");

                            b1.HasData(
                                new
                                {
                                    ContactUsId = (byte)1,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 96, DateTimeKind.Local).AddTicks(4082),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 96, DateTimeKind.Local).AddTicks(4134)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.NewsLetterMember", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.NextCart", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithOne("NextCart")
                        .HasForeignKey("OrganicShop.Domain.Entities.NextCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Operation", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("Operations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Order", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "Receiver")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Permission", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Permission", "Parent")
                        .WithMany("Subs")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<byte>("PermissionId")
                                .HasColumnType("tinyint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("PermissionId");

                            b1.ToTable("Permissions");

                            b1.WithOwner()
                                .HasForeignKey("PermissionId");

                            b1.HasData(
                                new
                                {
                                    PermissionId = (byte)1,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(705),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(760)
                                },
                                new
                                {
                                    PermissionId = (byte)2,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(764),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(776)
                                },
                                new
                                {
                                    PermissionId = (byte)3,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(786),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(788)
                                },
                                new
                                {
                                    PermissionId = (byte)4,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(791),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(793)
                                },
                                new
                                {
                                    PermissionId = (byte)5,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(801),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(803)
                                },
                                new
                                {
                                    PermissionId = (byte)6,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(808),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(810)
                                },
                                new
                                {
                                    PermissionId = (byte)7,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(813),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(838)
                                },
                                new
                                {
                                    PermissionId = (byte)8,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(841),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 107, DateTimeKind.Local).AddTicks(844)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Picture", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Article", "Article")
                        .WithMany("Pictures")
                        .HasForeignKey("ArticleId");

                    b.HasOne("OrganicShop.Domain.Entities.Category", "Category")
                        .WithOne("Picture")
                        .HasForeignKey("OrganicShop.Domain.Entities.Picture", "CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId");

                    b.HasOne("OrganicShop.Domain.Entities.Seller", "Seller")
                        .WithOne("Picture")
                        .HasForeignKey("OrganicShop.Domain.Entities.Picture", "SellerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithOne("Picture")
                        .HasForeignKey("OrganicShop.Domain.Entities.Picture", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("PictureId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("PictureId");

                            b1.ToTable("Picture");

                            b1.WithOwner()
                                .HasForeignKey("PictureId");

                            b1.HasData(
                                new
                                {
                                    PictureId = 1L,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 176, DateTimeKind.Local).AddTicks(3718),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 176, DateTimeKind.Local).AddTicks(3773)
                                });
                        });

                    b.Navigation("Article");

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Product", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Seller", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Cart", "Cart")
                        .WithMany("ProductItems")
                        .HasForeignKey("CartId");

                    b.HasOne("OrganicShop.Domain.Entities.NextCart", "NextCart")
                        .WithMany("ProductItems")
                        .HasForeignKey("NextCartId");

                    b.HasOne("OrganicShop.Domain.Entities.Order", "Order")
                        .WithMany("ProductItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("NextCart");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Property", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("Properties")
                        .HasForeignKey("ProductId");

                    b.HasOne("OrganicShop.Domain.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.CouponCategories", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", "Category")
                        .WithMany("CouponCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponCategories")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.DiscountProducts", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Discount", "Discount")
                        .WithMany("DiscountProducts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("DiscountProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.PermissionUsers", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("PermissionUsersId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("PermissionUsersId");

                            b1.ToTable("PermissionUsers");

                            b1.WithOwner()
                                .HasForeignKey("PermissionUsersId");

                            b1.HasData(
                                new
                                {
                                    PermissionUsersId = 1,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 152, DateTimeKind.Local).AddTicks(6159),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 152, DateTimeKind.Local).AddTicks(6211)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.TagArticles", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Article", "Article")
                        .WithMany("TagArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Tag", "Tag")
                        .WithMany("TagArticles")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.TagProducts", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.WishItem", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("WishItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("WishItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Seller", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("OrganicShop.Domain.Entities.Seller", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ShippingMethod", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<byte>("ShippingMethodId")
                                .HasColumnType("tinyint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("ShippingMethodId");

                            b1.ToTable("ShippingMethods");

                            b1.WithOwner()
                                .HasForeignKey("ShippingMethodId");

                            b1.HasData(
                                new
                                {
                                    ShippingMethodId = (byte)1,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(334),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(386)
                                },
                                new
                                {
                                    ShippingMethodId = (byte)2,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(887),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(896)
                                },
                                new
                                {
                                    ShippingMethodId = (byte)3,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(1098),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(1105)
                                },
                                new
                                {
                                    ShippingMethodId = (byte)4,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(1273),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 195, DateTimeKind.Local).AddTicks(1287)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingDescription", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Order", "Order")
                        .WithMany("TrackingDescriptions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingStatus", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Order", "Order")
                        .WithMany("TrackingStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.User", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.ComplexTypes.UserPrivacy", "Privacy", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("DeleteAccountAfterLogOut")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsEmailVisible")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsProfileImageVisible")
                                .HasColumnType("bit");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    DeleteAccountAfterLogOut = false,
                                    IsEmailVisible = false,
                                    IsProfileImageVisible = false
                                },
                                new
                                {
                                    UserId = 2L,
                                    DeleteAccountAfterLogOut = false,
                                    IsEmailVisible = true,
                                    IsProfileImageVisible = true
                                });
                        });

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 215, DateTimeKind.Local).AddTicks(8869),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 215, DateTimeKind.Local).AddTicks(8914)
                                },
                                new
                                {
                                    UserId = 2L,
                                    CreateDate = new DateTime(2024, 8, 13, 10, 36, 38, 215, DateTimeKind.Local).AddTicks(9587),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 8, 13, 10, 36, 38, 215, DateTimeKind.Local).AddTicks(9596)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Privacy")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.UserMessage", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Pictures");

                    b.Navigation("TagArticles");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Cart", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("CouponCategories");

                    b.Navigation("Picture");

                    b.Navigation("Subs");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponCategories");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Discount", b =>
                {
                    b.Navigation("DiscountProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.NextCart", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Order", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("TrackingDescriptions");

                    b.Navigation("TrackingStatuses");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Permission", b =>
                {
                    b.Navigation("PermissionUsers");

                    b.Navigation("Subs");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DiscountProducts");

                    b.Navigation("Pictures");

                    b.Navigation("ProductItems");

                    b.Navigation("Properties");

                    b.Navigation("TagProducts");

                    b.Navigation("WishItems");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Seller", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Picture");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Tag", b =>
                {
                    b.Navigation("TagArticles");

                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Articles");

                    b.Navigation("BankCards");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("NextCart")
                        .IsRequired();

                    b.Navigation("Operations");

                    b.Navigation("Orders");

                    b.Navigation("PermissionUsers");

                    b.Navigation("Picture");

                    b.Navigation("Seller");

                    b.Navigation("UserMessages");

                    b.Navigation("WishItems");
                });
#pragma warning restore 612, 618
        }
    }
}
