// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrganicShop.DAL.Context;

#nullable disable

namespace OrganicShop.DAL.Migrations
{
    [DbContext(typeof(OrganicShopDbContext))]
    partial class OrganicShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrganicShop.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.BankCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cvv2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserrId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserrId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ContactUs", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Address = "Address",
                            Description = "Descriptions",
                            Email1 = "OrganicShop@gmail.com",
                            Office1 = "Tehran",
                            Phone1 = "02134658899",
                            PhoneNumber1 = "09121234455",
                            ShortDescription = "ShorDescriptions"
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FixValue")
                        .HasColumnType("int");

                    b.Property<bool>("FreeDelivery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixDiscount")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("int");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<int?>("Percent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Faq", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TextHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityNewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOldData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DeliveryDatePredicate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Permission", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("EnTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("ParentId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            EnTitle = "Main Admin",
                            Title = "مدیر سایت"
                        },
                        new
                        {
                            Id = (byte)2,
                            EnTitle = "Users Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت کاربران"
                        },
                        new
                        {
                            Id = (byte)3,
                            EnTitle = "Products Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت محصولات"
                        },
                        new
                        {
                            Id = (byte)4,
                            EnTitle = "Permissions Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت مجوز ها"
                        },
                        new
                        {
                            Id = (byte)5,
                            EnTitle = "Comments Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت نظرات"
                        },
                        new
                        {
                            Id = (byte)6,
                            EnTitle = "Discounts Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت تخفیف ها"
                        },
                        new
                        {
                            Id = (byte)7,
                            EnTitle = "Categories Admin",
                            ParentId = (byte)1,
                            Title = "مدیریت دسته ها"
                        },
                        new
                        {
                            Id = (byte)8,
                            EnTitle = "Giving Permission",
                            ParentId = (byte)4,
                            Title = "صدور مجوز"
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Picture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CategoryPictureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<float>("SizeMB")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long?>("UserPictureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryPictureId")
                        .IsUnique()
                        .HasFilter("[CategoryPictureId] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserPictureId")
                        .IsUnique()
                        .HasFilter("[UserPictureId] IS NOT NULL");

                    b.ToTable("Picture");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsMain = true,
                            Name = "jocker.png",
                            SizeMB = 0.5f,
                            Type = 0,
                            UserPictureId = 1L
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ProductItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBase")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("ProductId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.DiscountCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountCategories");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.DiscountProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.PermissionUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("PermissionId")
                        .HasColumnType("tinyint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionUsers");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.TagProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("TagProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingDescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("TrackingDescriptions");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoneStatus")
                        .HasColumnType("int");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("TrackingStatuses");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.UnitValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "mas1379as@gmail.com",
                            Name = "Mahdi Asadi",
                            Password = "123456",
                            PhoneNumber = "09369753041",
                            Role = 2
                        },
                        new
                        {
                            Id = 2L,
                            Email = "TestEmail@gmail.com",
                            Name = "AmirAli",
                            Password = "1234",
                            PhoneNumber = "09331234566",
                            Role = 3
                        });
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Address", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("AddressId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("AddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Article", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("ArticleId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("ArticleId");

                            b1.ToTable("Articles");

                            b1.WithOwner()
                                .HasForeignKey("ArticleId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.BankCard", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("BankCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("BankCardId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("BankCardId");

                            b1.ToTable("BankCards");

                            b1.WithOwner()
                                .HasForeignKey("BankCardId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OrganicShop.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.User", "Userr")
                        .WithOne("NextCart")
                        .HasForeignKey("OrganicShop.Domain.Entities.Cart", "UserrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("CartId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("CartId");

                            b1.ToTable("Carts");

                            b1.WithOwner()
                                .HasForeignKey("CartId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Userr");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Category", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", "Parent")
                        .WithMany("Subs")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("CategoryId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Comment", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("CommentId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("CommentId");

                            b1.ToTable("Comments");

                            b1.WithOwner()
                                .HasForeignKey("CommentId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ContactUs", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<byte>("ContactUsId")
                                .HasColumnType("tinyint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("ContactUsId");

                            b1.ToTable("ContactUs");

                            b1.WithOwner()
                                .HasForeignKey("ContactUsId");

                            b1.HasData(
                                new
                                {
                                    ContactUsId = (byte)1,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 547, DateTimeKind.Local).AddTicks(3072),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 547, DateTimeKind.Local).AddTicks(3131)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Discount", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("DiscountId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("DiscountId");

                            b1.ToTable("Discounts");

                            b1.WithOwner()
                                .HasForeignKey("DiscountId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Faq", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<byte>("FaqId")
                                .HasColumnType("tinyint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("FaqId");

                            b1.ToTable("Faqs");

                            b1.WithOwner()
                                .HasForeignKey("FaqId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Notification", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("NotificationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Operation", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("Operations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Order", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.User", "Receiver")
                        .WithMany("Orders")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address");

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Permission", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Permission", "Parent")
                        .WithMany("Subs")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<byte>("PermissionId")
                                .HasColumnType("tinyint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("PermissionId");

                            b1.ToTable("Permissions");

                            b1.WithOwner()
                                .HasForeignKey("PermissionId");

                            b1.HasData(
                                new
                                {
                                    PermissionId = (byte)1,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6208),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6263)
                                },
                                new
                                {
                                    PermissionId = (byte)2,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6272),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6280)
                                },
                                new
                                {
                                    PermissionId = (byte)3,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6287),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6289)
                                },
                                new
                                {
                                    PermissionId = (byte)4,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6293),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6296)
                                },
                                new
                                {
                                    PermissionId = (byte)5,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6309),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6311)
                                },
                                new
                                {
                                    PermissionId = (byte)6,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6316),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6318)
                                },
                                new
                                {
                                    PermissionId = (byte)7,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6321),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6343)
                                },
                                new
                                {
                                    PermissionId = (byte)8,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6346),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 556, DateTimeKind.Local).AddTicks(6348)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Picture", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", "Category")
                        .WithOne("Picture")
                        .HasForeignKey("OrganicShop.Domain.Entities.Picture", "CategoryPictureId");

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId");

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithOne("Picture")
                        .HasForeignKey("OrganicShop.Domain.Entities.Picture", "UserPictureId");

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("PictureId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("PictureId");

                            b1.ToTable("Picture");

                            b1.WithOwner()
                                .HasForeignKey("PictureId");

                            b1.HasData(
                                new
                                {
                                    PictureId = 1L,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 558, DateTimeKind.Local).AddTicks(6815),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 558, DateTimeKind.Local).AddTicks(6862)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Product", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Cart", "Cart")
                        .WithMany("ProductItems")
                        .HasForeignKey("CartId");

                    b.HasOne("OrganicShop.Domain.Entities.Order", "Order")
                        .WithMany("ProductItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("ProductItemId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProductItemId");

                            b1.ToTable("ProductItems");

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Property", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Property", "Base")
                        .WithMany("Childs")
                        .HasForeignKey("BaseId");

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("Properties")
                        .HasForeignKey("ProductId");

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("PropertyId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.Navigation("Base");

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.DiscountCategories", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Category", "Category")
                        .WithMany("DiscountCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Discount", "Discount")
                        .WithMany("DiscountCategories")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("DiscountCategoriesId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("DiscountCategoriesId");

                            b1.ToTable("DiscountCategories");

                            b1.WithOwner()
                                .HasForeignKey("DiscountCategoriesId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.DiscountProducts", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Discount", "Discount")
                        .WithMany("DiscountProducts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("DiscountProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("DiscountProductsId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("DiscountProductsId");

                            b1.ToTable("DiscountProducts");

                            b1.WithOwner()
                                .HasForeignKey("DiscountProductsId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.PermissionUsers", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.User", "User")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("PermissionUsersId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("PermissionUsersId");

                            b1.ToTable("PermissionUsers");

                            b1.WithOwner()
                                .HasForeignKey("PermissionUsersId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Relations.TagProducts", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("TagProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicShop.Domain.Entities.Tag", "Tag")
                        .WithMany("TagProducts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("TagProductsId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("TagProductsId");

                            b1.ToTable("TagProducts");

                            b1.WithOwner()
                                .HasForeignKey("TagProductsId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Tag", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<int>("TagId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("TagId");

                            b1.ToTable("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingDescription", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Order", "Order")
                        .WithMany("TrackingDescriptions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("TrackingDescriptionId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("TrackingDescriptionId");

                            b1.ToTable("TrackingDescriptions");

                            b1.WithOwner()
                                .HasForeignKey("TrackingDescriptionId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.TrackingStatus", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Order", "Order")
                        .WithMany("TrackingStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("TrackingStatusId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("TrackingStatusId");

                            b1.ToTable("TrackingStatuses");

                            b1.WithOwner()
                                .HasForeignKey("TrackingStatusId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.UnitValue", b =>
                {
                    b.HasOne("OrganicShop.Domain.Entities.Product", "Product")
                        .WithMany("UnitValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("UnitValueId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("UnitValueId");

                            b1.ToTable("Units");

                            b1.WithOwner()
                                .HasForeignKey("UnitValueId");
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.User", b =>
                {
                    b.OwnsOne("OrganicShop.Domain.Entities.Base.BaseEntity", "BaseEntity", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("DeleteDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1L,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 563, DateTimeKind.Local).AddTicks(3145),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 563, DateTimeKind.Local).AddTicks(3201)
                                },
                                new
                                {
                                    UserId = 2L,
                                    CreateDate = new DateTime(2024, 4, 22, 22, 33, 35, 563, DateTimeKind.Local).AddTicks(3390),
                                    IsActive = true,
                                    IsDelete = false,
                                    LastModified = new DateTime(2024, 4, 22, 22, 33, 35, 563, DateTimeKind.Local).AddTicks(3398)
                                });
                        });

                    b.Navigation("BaseEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Cart", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Category", b =>
                {
                    b.Navigation("DiscountCategories");

                    b.Navigation("Picture");

                    b.Navigation("Products");

                    b.Navigation("Subs");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Discount", b =>
                {
                    b.Navigation("DiscountCategories");

                    b.Navigation("DiscountProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Order", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("TrackingDescriptions");

                    b.Navigation("TrackingStatuses");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Permission", b =>
                {
                    b.Navigation("PermissionUsers");

                    b.Navigation("Subs");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DiscountProducts");

                    b.Navigation("Pictures");

                    b.Navigation("ProductItems");

                    b.Navigation("Properties");

                    b.Navigation("TagProducts");

                    b.Navigation("UnitValues");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Property", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.Tag", b =>
                {
                    b.Navigation("TagProducts");
                });

            modelBuilder.Entity("OrganicShop.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankCards");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("NextCart")
                        .IsRequired();

                    b.Navigation("Operations");

                    b.Navigation("Orders");

                    b.Navigation("PermissionUsers");

                    b.Navigation("Picture");
                });
#pragma warning restore 612, 618
        }
    }
}
